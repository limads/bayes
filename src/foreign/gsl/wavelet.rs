use crate::foreign::gsl::vector_double::*;

/* automatically generated by rust-bindgen */

pub const gsl_wavelet_direction_gsl_wavelet_forward: gsl_wavelet_direction = 1;
pub const gsl_wavelet_direction_gsl_wavelet_backward: gsl_wavelet_direction = -1;
pub type gsl_wavelet_direction = i32;
#[repr(C)]
pub struct gsl_wavelet_type {
    pub name: *const ::std::os::raw::c_char,
    pub init: ::std::option::Option<
        unsafe extern "C" fn(h1: *mut *const f64,
                             g1: *mut *const f64,
                             h2: *mut *const f64,
                             g2: *mut *const f64,
                             nc: *mut usize,
                             offset: *mut usize,
                             member: usize)
                             -> ::std::os::raw::c_int,
    >,
}
#[repr(C)]
pub struct gsl_wavelet {
    pub type_: *const gsl_wavelet_type,
    pub h1: *const f64,
    pub g1: *const f64,
    pub h2: *const f64,
    pub g2: *const f64,
    pub nc: usize,
    pub offset: usize,
}
#[repr(C)]
pub struct gsl_wavelet_workspace {
    pub scratch: *mut f64,
    pub n: usize,
}
extern "C" {
    pub static mut gsl_wavelet_daubechies: *const gsl_wavelet_type;
}
extern "C" {
    pub static mut gsl_wavelet_daubechies_centered: *const gsl_wavelet_type;
}
extern "C" {
    pub static mut gsl_wavelet_haar: *const gsl_wavelet_type;
}
extern "C" {
    pub static mut gsl_wavelet_haar_centered: *const gsl_wavelet_type;
}
extern "C" {
    pub static mut gsl_wavelet_bspline: *const gsl_wavelet_type;
}
extern "C" {
    pub static mut gsl_wavelet_bspline_centered: *const gsl_wavelet_type;
}
extern "C" {
    pub fn gsl_wavelet_alloc(T: *const gsl_wavelet_type, k: usize) -> *mut gsl_wavelet;
}
extern "C" {
    pub fn gsl_wavelet_free(w: *mut gsl_wavelet);
}
extern "C" {
    pub fn gsl_wavelet_name(w: *const gsl_wavelet) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn gsl_wavelet_workspace_alloc(n: usize) -> *mut gsl_wavelet_workspace;
}
extern "C" {
    pub fn gsl_wavelet_workspace_free(work: *mut gsl_wavelet_workspace);
}
extern "C" {
    pub fn gsl_wavelet_transform(
        w: *const gsl_wavelet,
        data: *mut f64,
        stride: usize,
        n: usize,
        dir: gsl_wavelet_direction,
        work: *mut gsl_wavelet_workspace,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsl_wavelet_transform_forward(
        w: *const gsl_wavelet,
        data: *mut f64,
        stride: usize,
        n: usize,
        work: *mut gsl_wavelet_workspace,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsl_wavelet_transform_inverse(
        w: *const gsl_wavelet,
        data: *mut f64,
        stride: usize,
        n: usize,
        work: *mut gsl_wavelet_workspace,
    ) -> ::std::os::raw::c_int;
}
