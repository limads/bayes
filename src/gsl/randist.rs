/* automatically generated by rust-bindgen */

use crate::gsl::vector_double::*;
use crate::gsl::matrix_double::*;
use crate::gsl::block_double::*;
use crate::gsl::rng::*;

extern "C" {
    pub fn gsl_ran_bernoulli(r: *const gsl_rng, p: f64) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gsl_ran_bernoulli_pdf(k: ::std::os::raw::c_uint, p: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_beta(r: *const gsl_rng, a: f64, b: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_beta_pdf(x: f64, a: f64, b: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_binomial(
        r: *const gsl_rng,
        p: f64,
        n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gsl_ran_binomial_knuth(
        r: *const gsl_rng,
        p: f64,
        n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gsl_ran_binomial_tpe(
        r: *const gsl_rng,
        p: f64,
        n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gsl_ran_binomial_pdf(
        k: ::std::os::raw::c_uint,
        p: f64,
        n: ::std::os::raw::c_uint,
    ) -> f64;
}
extern "C" {
    pub fn gsl_ran_exponential(r: *const gsl_rng, mu: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_exponential_pdf(x: f64, mu: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_exppow(r: *const gsl_rng, a: f64, b: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_exppow_pdf(x: f64, a: f64, b: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_cauchy(r: *const gsl_rng, a: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_cauchy_pdf(x: f64, a: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_chisq(r: *const gsl_rng, nu: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_chisq_pdf(x: f64, nu: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_dirichlet(r: *const gsl_rng, K: usize, alpha: *const f64, theta: *mut f64);
}
extern "C" {
    pub fn gsl_ran_dirichlet_pdf(K: usize, alpha: *const f64, theta: *const f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_dirichlet_lnpdf(K: usize, alpha: *const f64, theta: *const f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_erlang(r: *const gsl_rng, a: f64, n: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_erlang_pdf(x: f64, a: f64, n: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_fdist(r: *const gsl_rng, nu1: f64, nu2: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_fdist_pdf(x: f64, nu1: f64, nu2: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_flat(r: *const gsl_rng, a: f64, b: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_flat_pdf(x: f64, a: f64, b: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_gamma(r: *const gsl_rng, a: f64, b: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_gamma_int(r: *const gsl_rng, a: ::std::os::raw::c_uint) -> f64;
}
extern "C" {
    pub fn gsl_ran_gamma_pdf(x: f64, a: f64, b: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_gamma_mt(r: *const gsl_rng, a: f64, b: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_gamma_knuth(r: *const gsl_rng, a: f64, b: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_gaussian(r: *const gsl_rng, sigma: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_gaussian_ratio_method(r: *const gsl_rng, sigma: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_gaussian_ziggurat(r: *const gsl_rng, sigma: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_gaussian_pdf(x: f64, sigma: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_ugaussian(r: *const gsl_rng) -> f64;
}
extern "C" {
    pub fn gsl_ran_ugaussian_ratio_method(r: *const gsl_rng) -> f64;
}
extern "C" {
    pub fn gsl_ran_ugaussian_pdf(x: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_gaussian_tail(r: *const gsl_rng, a: f64, sigma: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_gaussian_tail_pdf(x: f64, a: f64, sigma: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_ugaussian_tail(r: *const gsl_rng, a: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_ugaussian_tail_pdf(x: f64, a: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_bivariate_gaussian(
        r: *const gsl_rng,
        sigma_x: f64,
        sigma_y: f64,
        rho: f64,
        x: *mut f64,
        y: *mut f64,
    );
}
extern "C" {
    pub fn gsl_ran_bivariate_gaussian_pdf(
        x: f64,
        y: f64,
        sigma_x: f64,
        sigma_y: f64,
        rho: f64,
    ) -> f64;
}
extern "C" {
    pub fn gsl_ran_multivariate_gaussian(
        r: *const gsl_rng,
        mu: *const gsl_vector,
        L: *const gsl_matrix,
        result: *mut gsl_vector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsl_ran_multivariate_gaussian_log_pdf(
        x: *const gsl_vector,
        mu: *const gsl_vector,
        L: *const gsl_matrix,
        result: *mut f64,
        work: *mut gsl_vector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsl_ran_multivariate_gaussian_pdf(
        x: *const gsl_vector,
        mu: *const gsl_vector,
        L: *const gsl_matrix,
        result: *mut f64,
        work: *mut gsl_vector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsl_ran_multivariate_gaussian_mean(
        X: *const gsl_matrix,
        mu_hat: *mut gsl_vector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsl_ran_multivariate_gaussian_vcov(
        X: *const gsl_matrix,
        sigma_hat: *mut gsl_matrix,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsl_ran_wishart(
        r: *const gsl_rng,
        df: f64,
        L: *const gsl_matrix,
        result: *mut gsl_matrix,
        work: *mut gsl_matrix,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsl_ran_wishart_log_pdf(
        X: *const gsl_matrix,
        L_X: *const gsl_matrix,
        df: f64,
        L: *const gsl_matrix,
        result: *mut f64,
        work: *mut gsl_matrix,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsl_ran_wishart_pdf(
        X: *const gsl_matrix,
        L_X: *const gsl_matrix,
        df: f64,
        L: *const gsl_matrix,
        result: *mut f64,
        work: *mut gsl_matrix,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsl_ran_landau(r: *const gsl_rng) -> f64;
}
extern "C" {
    pub fn gsl_ran_landau_pdf(x: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_geometric(r: *const gsl_rng, p: f64) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gsl_ran_geometric_pdf(k: ::std::os::raw::c_uint, p: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_hypergeometric(
        r: *const gsl_rng,
        n1: ::std::os::raw::c_uint,
        n2: ::std::os::raw::c_uint,
        t: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gsl_ran_hypergeometric_pdf(
        k: ::std::os::raw::c_uint,
        n1: ::std::os::raw::c_uint,
        n2: ::std::os::raw::c_uint,
        t: ::std::os::raw::c_uint,
    ) -> f64;
}
extern "C" {
    pub fn gsl_ran_gumbel1(r: *const gsl_rng, a: f64, b: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_gumbel1_pdf(x: f64, a: f64, b: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_gumbel2(r: *const gsl_rng, a: f64, b: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_gumbel2_pdf(x: f64, a: f64, b: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_logistic(r: *const gsl_rng, a: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_logistic_pdf(x: f64, a: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_lognormal(r: *const gsl_rng, zeta: f64, sigma: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_lognormal_pdf(x: f64, zeta: f64, sigma: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_logarithmic(r: *const gsl_rng, p: f64) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gsl_ran_logarithmic_pdf(k: ::std::os::raw::c_uint, p: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_multinomial(
        r: *const gsl_rng,
        K: usize,
        N: ::std::os::raw::c_uint,
        p: *const f64,
        n: *mut ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn gsl_ran_multinomial_pdf(
        K: usize,
        p: *const f64,
        n: *const ::std::os::raw::c_uint,
    ) -> f64;
}
extern "C" {
    pub fn gsl_ran_multinomial_lnpdf(
        K: usize,
        p: *const f64,
        n: *const ::std::os::raw::c_uint,
    ) -> f64;
}
extern "C" {
    pub fn gsl_ran_negative_binomial(r: *const gsl_rng, p: f64, n: f64) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gsl_ran_negative_binomial_pdf(k: ::std::os::raw::c_uint, p: f64, n: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_pascal(
        r: *const gsl_rng,
        p: f64,
        n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gsl_ran_pascal_pdf(k: ::std::os::raw::c_uint, p: f64, n: ::std::os::raw::c_uint) -> f64;
}
extern "C" {
    pub fn gsl_ran_pareto(r: *const gsl_rng, a: f64, b: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_pareto_pdf(x: f64, a: f64, b: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_poisson(r: *const gsl_rng, mu: f64) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gsl_ran_poisson_array(
        r: *const gsl_rng,
        n: usize,
        array: *mut ::std::os::raw::c_uint,
        mu: f64,
    );
}
extern "C" {
    pub fn gsl_ran_poisson_pdf(k: ::std::os::raw::c_uint, mu: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_rayleigh(r: *const gsl_rng, sigma: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_rayleigh_pdf(x: f64, sigma: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_rayleigh_tail(r: *const gsl_rng, a: f64, sigma: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_rayleigh_tail_pdf(x: f64, a: f64, sigma: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_tdist(r: *const gsl_rng, nu: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_tdist_pdf(x: f64, nu: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_laplace(r: *const gsl_rng, a: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_laplace_pdf(x: f64, a: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_levy(r: *const gsl_rng, c: f64, alpha: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_levy_skew(r: *const gsl_rng, c: f64, alpha: f64, beta: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_weibull(r: *const gsl_rng, a: f64, b: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_weibull_pdf(x: f64, a: f64, b: f64) -> f64;
}
extern "C" {
    pub fn gsl_ran_dir_2d(r: *const gsl_rng, x: *mut f64, y: *mut f64);
}
extern "C" {
    pub fn gsl_ran_dir_2d_trig_method(r: *const gsl_rng, x: *mut f64, y: *mut f64);
}
extern "C" {
    pub fn gsl_ran_dir_3d(r: *const gsl_rng, x: *mut f64, y: *mut f64, z: *mut f64);
}
extern "C" {
    pub fn gsl_ran_dir_nd(r: *const gsl_rng, n: usize, x: *mut f64);
}
extern "C" {
    pub fn gsl_ran_shuffle(
        r: *const gsl_rng,
        base: *mut ::std::os::raw::c_void,
        nmembm: usize,
        size: usize,
    );
}
extern "C" {
    pub fn gsl_ran_choose(
        r: *const gsl_rng,
        dest: *mut ::std::os::raw::c_void,
        k: usize,
        src: *mut ::std::os::raw::c_void,
        n: usize,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsl_ran_sample(
        r: *const gsl_rng,
        dest: *mut ::std::os::raw::c_void,
        k: usize,
        src: *mut ::std::os::raw::c_void,
        n: usize,
        size: usize,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gsl_ran_discrete_t {
    pub K: usize,
    pub A: *mut usize,
    pub F: *mut f64,
}
extern "C" {
    pub fn gsl_ran_discrete_preproc(K: usize, P: *const f64) -> *mut gsl_ran_discrete_t;
}
extern "C" {
    pub fn gsl_ran_discrete_free(g: *mut gsl_ran_discrete_t);
}
extern "C" {
    pub fn gsl_ran_discrete(r: *const gsl_rng, g: *const gsl_ran_discrete_t) -> usize;
}
extern "C" {
    pub fn gsl_ran_discrete_pdf(k: usize, g: *const gsl_ran_discrete_t) -> f64;
}
