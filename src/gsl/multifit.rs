use crate::gsl::vector_double::*;
use crate::gsl::matrix_double::*;
use crate::gsl::block_double::*;

/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gsl_multifit_linear_workspace {
    pub nmax: usize,
    pub pmax: usize,
    pub n: usize,
    pub p: usize,
    pub A: *mut gsl_matrix,
    pub Q: *mut gsl_matrix,
    pub QSI: *mut gsl_matrix,
    pub S: *mut gsl_vector,
    pub t: *mut gsl_vector,
    pub xt: *mut gsl_vector,
    pub D: *mut gsl_vector,
    pub rcond: f64,
}
extern "C" {
    pub fn gsl_multifit_linear_alloc(n: usize, p: usize) -> *mut gsl_multifit_linear_workspace;
}
extern "C" {
    pub fn gsl_multifit_linear_free(w: *mut gsl_multifit_linear_workspace);
}
extern "C" {
    pub fn gsl_multifit_linear(
        X: *const gsl_matrix,
        y: *const gsl_vector,
        c: *mut gsl_vector,
        cov: *mut gsl_matrix,
        chisq: *mut f64,
        work: *mut gsl_multifit_linear_workspace,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsl_multifit_linear_tsvd(
        X: *const gsl_matrix,
        y: *const gsl_vector,
        tol: f64,
        c: *mut gsl_vector,
        cov: *mut gsl_matrix,
        chisq: *mut f64,
        rank: *mut usize,
        work: *mut gsl_multifit_linear_workspace,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsl_multifit_linear_svd(
        X: *const gsl_matrix,
        work: *mut gsl_multifit_linear_workspace,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsl_multifit_linear_bsvd(
        X: *const gsl_matrix,
        work: *mut gsl_multifit_linear_workspace,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsl_multifit_linear_rank(tol: f64, work: *const gsl_multifit_linear_workspace) -> usize;
}
extern "C" {
    pub fn gsl_multifit_linear_solve(
        lambda: f64,
        X: *const gsl_matrix,
        y: *const gsl_vector,
        c: *mut gsl_vector,
        rnorm: *mut f64,
        snorm: *mut f64,
        work: *mut gsl_multifit_linear_workspace,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsl_multifit_linear_applyW(
        X: *const gsl_matrix,
        w: *const gsl_vector,
        y: *const gsl_vector,
        WX: *mut gsl_matrix,
        Wy: *mut gsl_vector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsl_multifit_linear_stdform1(
        L: *const gsl_vector,
        X: *const gsl_matrix,
        y: *const gsl_vector,
        Xs: *mut gsl_matrix,
        ys: *mut gsl_vector,
        work: *mut gsl_multifit_linear_workspace,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsl_multifit_linear_wstdform1(
        L: *const gsl_vector,
        X: *const gsl_matrix,
        w: *const gsl_vector,
        y: *const gsl_vector,
        Xs: *mut gsl_matrix,
        ys: *mut gsl_vector,
        work: *mut gsl_multifit_linear_workspace,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsl_multifit_linear_L_decomp(
        L: *mut gsl_matrix,
        tau: *mut gsl_vector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsl_multifit_linear_stdform2(
        LQR: *const gsl_matrix,
        Ltau: *const gsl_vector,
        X: *const gsl_matrix,
        y: *const gsl_vector,
        Xs: *mut gsl_matrix,
        ys: *mut gsl_vector,
        M: *mut gsl_matrix,
        work: *mut gsl_multifit_linear_workspace,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsl_multifit_linear_wstdform2(
        LQR: *const gsl_matrix,
        Ltau: *const gsl_vector,
        X: *const gsl_matrix,
        w: *const gsl_vector,
        y: *const gsl_vector,
        Xs: *mut gsl_matrix,
        ys: *mut gsl_vector,
        M: *mut gsl_matrix,
        work: *mut gsl_multifit_linear_workspace,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsl_multifit_linear_genform1(
        L: *const gsl_vector,
        cs: *const gsl_vector,
        c: *mut gsl_vector,
        work: *mut gsl_multifit_linear_workspace,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsl_multifit_linear_genform2(
        LQR: *const gsl_matrix,
        Ltau: *const gsl_vector,
        X: *const gsl_matrix,
        y: *const gsl_vector,
        cs: *const gsl_vector,
        M: *const gsl_matrix,
        c: *mut gsl_vector,
        work: *mut gsl_multifit_linear_workspace,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsl_multifit_linear_wgenform2(
        LQR: *const gsl_matrix,
        Ltau: *const gsl_vector,
        X: *const gsl_matrix,
        w: *const gsl_vector,
        y: *const gsl_vector,
        cs: *const gsl_vector,
        M: *const gsl_matrix,
        c: *mut gsl_vector,
        work: *mut gsl_multifit_linear_workspace,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsl_multifit_linear_lreg(
        smin: f64,
        smax: f64,
        reg_param: *mut gsl_vector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsl_multifit_linear_lcurve(
        y: *const gsl_vector,
        reg_param: *mut gsl_vector,
        rho: *mut gsl_vector,
        eta: *mut gsl_vector,
        work: *mut gsl_multifit_linear_workspace,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsl_multifit_linear_lcorner(
        rho: *const gsl_vector,
        eta: *const gsl_vector,
        idx: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsl_multifit_linear_lcorner2(
        reg_param: *const gsl_vector,
        eta: *const gsl_vector,
        idx: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsl_multifit_linear_Lk(p: usize, k: usize, L: *mut gsl_matrix) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsl_multifit_linear_Lsobolev(
        p: usize,
        kmax: usize,
        alpha: *const gsl_vector,
        L: *mut gsl_matrix,
        work: *mut gsl_multifit_linear_workspace,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsl_multifit_wlinear(
        X: *const gsl_matrix,
        w: *const gsl_vector,
        y: *const gsl_vector,
        c: *mut gsl_vector,
        cov: *mut gsl_matrix,
        chisq: *mut f64,
        work: *mut gsl_multifit_linear_workspace,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsl_multifit_wlinear_tsvd(
        X: *const gsl_matrix,
        w: *const gsl_vector,
        y: *const gsl_vector,
        tol: f64,
        c: *mut gsl_vector,
        cov: *mut gsl_matrix,
        chisq: *mut f64,
        rank: *mut usize,
        work: *mut gsl_multifit_linear_workspace,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsl_multifit_wlinear_svd(
        X: *const gsl_matrix,
        w: *const gsl_vector,
        y: *const gsl_vector,
        tol: f64,
        rank: *mut usize,
        c: *mut gsl_vector,
        cov: *mut gsl_matrix,
        chisq: *mut f64,
        work: *mut gsl_multifit_linear_workspace,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsl_multifit_wlinear_usvd(
        X: *const gsl_matrix,
        w: *const gsl_vector,
        y: *const gsl_vector,
        tol: f64,
        rank: *mut usize,
        c: *mut gsl_vector,
        cov: *mut gsl_matrix,
        chisq: *mut f64,
        work: *mut gsl_multifit_linear_workspace,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsl_multifit_linear_est(
        x: *const gsl_vector,
        c: *const gsl_vector,
        cov: *const gsl_matrix,
        y: *mut f64,
        y_err: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsl_multifit_linear_rcond(w: *const gsl_multifit_linear_workspace) -> f64;
}
extern "C" {
    pub fn gsl_multifit_linear_residuals(
        X: *const gsl_matrix,
        y: *const gsl_vector,
        c: *const gsl_vector,
        r: *mut gsl_vector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsl_multifit_linear_gcv_init(
        y: *const gsl_vector,
        reg_param: *mut gsl_vector,
        UTy: *mut gsl_vector,
        delta0: *mut f64,
        work: *mut gsl_multifit_linear_workspace,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsl_multifit_linear_gcv_curve(
        reg_param: *const gsl_vector,
        UTy: *const gsl_vector,
        delta0: f64,
        G: *mut gsl_vector,
        work: *mut gsl_multifit_linear_workspace,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsl_multifit_linear_gcv_min(
        reg_param: *const gsl_vector,
        UTy: *const gsl_vector,
        G: *const gsl_vector,
        delta0: f64,
        lambda: *mut f64,
        work: *mut gsl_multifit_linear_workspace,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsl_multifit_linear_gcv_calc(
        lambda: f64,
        UTy: *const gsl_vector,
        delta0: f64,
        work: *mut gsl_multifit_linear_workspace,
    ) -> f64;
}
extern "C" {
    pub fn gsl_multifit_linear_gcv(
        y: *const gsl_vector,
        reg_param: *mut gsl_vector,
        G: *mut gsl_vector,
        lambda: *mut f64,
        G_lambda: *mut f64,
        work: *mut gsl_multifit_linear_workspace,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gsl_multifit_robust_type {
    pub name: *const ::std::os::raw::c_char,
    pub wfun: ::std::option::Option<
        unsafe extern "C" fn(r: *const gsl_vector, w: *mut gsl_vector)
                             -> ::std::os::raw::c_int,
    >,
    pub psi_deriv: ::std::option::Option<
        unsafe extern "C" fn(r: *const gsl_vector,
                             dpsi: *mut gsl_vector)
                             -> ::std::os::raw::c_int,
    >,
    pub tuning_default: f64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gsl_multifit_robust_stats {
    pub sigma_ols: f64,
    pub sigma_mad: f64,
    pub sigma_rob: f64,
    pub sigma: f64,
    pub Rsq: f64,
    pub adj_Rsq: f64,
    pub rmse: f64,
    pub sse: f64,
    pub dof: usize,
    pub numit: usize,
    pub weights: *mut gsl_vector,
    pub r: *mut gsl_vector,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gsl_multifit_robust_workspace {
    pub n: usize,
    pub p: usize,
    pub numit: usize,
    pub maxiter: usize,
    pub type_: *const gsl_multifit_robust_type,
    pub tune: f64,
    pub r: *mut gsl_vector,
    pub weights: *mut gsl_vector,
    pub c_prev: *mut gsl_vector,
    pub resfac: *mut gsl_vector,
    pub psi: *mut gsl_vector,
    pub dpsi: *mut gsl_vector,
    pub QSI: *mut gsl_matrix,
    pub D: *mut gsl_vector,
    pub workn: *mut gsl_vector,
    pub stats: gsl_multifit_robust_stats,
    pub multifit_p: *mut gsl_multifit_linear_workspace,
}
extern "C" {
    pub fn gsl_multifit_robust_alloc(
        T: *const gsl_multifit_robust_type,
        n: usize,
        p: usize,
    ) -> *mut gsl_multifit_robust_workspace;
}
extern "C" {
    pub fn gsl_multifit_robust_free(w: *mut gsl_multifit_robust_workspace);
}
extern "C" {
    pub fn gsl_multifit_robust_tune(
        tune: f64,
        w: *mut gsl_multifit_robust_workspace,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsl_multifit_robust_maxiter(
        maxiter: usize,
        w: *mut gsl_multifit_robust_workspace,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsl_multifit_robust_name(
        w: *const gsl_multifit_robust_workspace,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn gsl_multifit_robust_statistics(
        w: *const gsl_multifit_robust_workspace,
    ) -> gsl_multifit_robust_stats;
}
extern "C" {
    pub fn gsl_multifit_robust_weights(
        r: *const gsl_vector,
        wts: *mut gsl_vector,
        w: *mut gsl_multifit_robust_workspace,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsl_multifit_robust(
        X: *const gsl_matrix,
        y: *const gsl_vector,
        c: *mut gsl_vector,
        cov: *mut gsl_matrix,
        w: *mut gsl_multifit_robust_workspace,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsl_multifit_robust_est(
        x: *const gsl_vector,
        c: *const gsl_vector,
        cov: *const gsl_matrix,
        y: *mut f64,
        y_err: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gsl_multifit_robust_residuals(
        X: *const gsl_matrix,
        y: *const gsl_vector,
        c: *const gsl_vector,
        r: *mut gsl_vector,
        w: *mut gsl_multifit_robust_workspace,
    ) -> ::std::os::raw::c_int;
}
